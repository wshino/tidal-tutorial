d1 $ s "bd ~ bd ~"
d2 $ s "[~ hh]*2"
d3 $ s "numbers:1"
d4 $ s "cp cp cp cp"
p 1234 $ s "bd bd"

p 4321 $ s "hh hh"

p "romeo" $ s "bd bd"

p "juliet" $ s "hh*4"
once $ s "trump"
p "loudpattern" $ silence
d1 $ sound "drum" |+| n "1 2 3"
d1 $ sound "drum" |+| n "2 3" |+| n "4 5 6"
d1 $ s "[bd sd] hh"
d1 $ s "bd sd hh"
d1 $ s "bd sd . hh hh hh"
d1 $ s "[bd sd, hh hh hh]"
d1 $ s "bd*2 sd"
d1 $ s "bd/2"
d1 $ s "[bd |cp |hh]"
d4 $ s "sd sd sd sd" $ silence
d1 $ s "bd <sd hh cp>"
d2 $ s "bd _ _ hh*4"
p "scroll" $ s "arpy:1 arpy:2 arpy:3 arpy:4 arpy:5"
p "scroll" $  s "[bd*4, [arpy:1,arpy:2,arpy:3,arpy:4,arpy:5](5,8)]"
d1 $ s "bd(3,8)"
d1 $ s "[bd(3,8), cp(2,8), hh(7,8), bass:1(7,16)]"
d1 $ s "[bd(5,8), cp(4,8), hh(7,8), bass:1(7,16)]"

d1 $ s "[bd(2,5)]"
d1 $ s "[bd(3,4)]"
d1 $ s "[bd(3,5,2)]"
d1 $ s "[bd(5,6)]"

d1 $ s "[bd(4,11)]" 

d1 $ s "{bd*2, hh*4, bd hh 808:4}"


d1 $ s "{bd hh 808:4}%8"
d2 $ s "{bd cp 808:5}%4" # speed 2 $ silence
hush
d1 $ sound "bd*8" # pan sine # speed (sine + 0.5)
d1 $ sound "bd*8" # pan cosine # speed (sine + 0.5)
d1 $ sound "bd*8" # pan (cat [square, sine])
d1 $ sound "bd*16" # speed (slow 2 $ range 0.5 2 tri)
d1 $ sound "bd*8" # pan (slow 2 saw)
d1 $ sound "bd*8" # pan (slow 2 isaw)
d1 $ sound "bd*8" # pan rand
d1 $ sound "drum*8" # n (irand 8)
d1 $ s "bass:5*8" # lpf (range 200 5000 $ sine) 
d1 $ s "bass:5*8" # lpf (slow 4 $ range 200 5000 $ sine) 

d1 $ n (slow 2 $ fmap (*7) $ run 8) 
  # s "supergong" 
  # decay "[1 0.2]/4"

d1 $ s "supertron" 
  # octave 3 
  # accelerate "0.2" 

d1 $ note "c d e f g a"
   # sound "<superpiano supersquare supersaw>"

d1 $ s "bd hh bd hh*2"
  # lpf "500 1000 1500"
  # lpq 0.5

d1 $ note "c d e f g a"
   # sound "<superpiano supersquare supersaw>"
   # lpf "500 1000 1500"
   # lpq 0.5

p "cpsfun" $ s "bd sd(3,8)" # cps (slow 8 $ 0.5 + saw)

d1 $ s "bd(3,8) drum*4"
xfade 1 $ s "arpy*8" # n (run 8)

d3 $ s "bd(3,8)"
xfade 3 $ s "arpy*4"

p "drums" $ s "bd(3,8) drum*4"
xfade "drums" $ s "arpy*8" # n (run 8)

xfadeIn 1 8 $ s "arpy*8" # n (run 8)

d1 $ slow 2 $ sound "alphabet(5,8)" # n "0 .. 4"

d1 $ sound "alphabet(5,8)" # nTake "susan" [0 .. 4]

d1 $ sound "alphabet(5,8)" # nTake "susan" [7]
d1 $ sound "alphabet(5,8)" # nTake "susan" [0 ..]
d1 $ sound "alphabet(5,8)" # nCount "harold"

setF "harold" 0
d2 $ sound "newnotes*16" # n "^harold" # gain 1

d1 $ struct "t(7,12,3)" $
  sound "gretsch"
  # nCountTo "rachael" 5

d1 $ struct "t(7,12,3)" $
  sound "gretsch"
  # nCountTo "rachael" "<4 8>"

d1 $ sound "newnotes(5,8)" # nCount "harold"
d1 $ rev $ sound "newnotes(5,8)" # nCount "harold"
d1 $ silence

d1 $ n "c'maj e'min" # s "supermandolin"
d2 $ n ("c e f" |+ "<'maj 'min>") # s "supermandolin"
d3 $ n("c4'maj c5'maj c6'maj") # s "supermandolin"

d1 $ s "bd*4" # nudge 0.9

d2 $ fast 2 $ s "~ sn" # nudge 0.4

all $ (|+ nudge 0.2)

d2 $ sound "bd hh hh hh"

d2 $ qtrigger 2 $ sound "bd hh hh hh"

d2 $ trigger 2 $ sound "bd hh hh hh"

d2 $ silence

d1 $ silence


-- d1 $ juxBy 0.4 rev $ every 2 (rot "<1 3 2>") $ n "0 <0 4> [2 0] [2 3]" # sound "feel" # speed "1.75 2"


d1 $ off 0.25 (# vowel "<a o i>")
  $ juxBy 0.4 rev $ every 2 (rot "<1 3 2>") $ n "0 <0 4> [2 0] [2 3]" # sound "feel" # speed "1.75 2"


d2 $ juxBy 0.5 rev $ chunk 4 ((+ speed (1 + sine)) . ply 8) $ note "3(3,8)" # sound "bass"
  # speed "<2 4>"
  # legato 1 

d1 $ n "c a f e"
  # sound "supermandolin"


d1 $ chunk 4 (|- note 5) $ jux rev $ 
  arp "<pinkyup down thumbup up>" $ n "<c'maj'4 e4'min'8 f4'maj'4>"
  # sound "supermandolin"
  # sustain 2 # room 0.3 # sz 0.9

d1 $ s "{808sd:11*3,808oh*4}"


d1
  $ every' 8 7 (ply "1 1 1 12" . (|* gain 0.9))
  $ sometimesBy 0.4 (jux(rev))
  $ sometimesBy 0.1 (density 2)
  $ s "{808sd:11*3,808oh*4}"
  # pan (range 0.3 0.7 rand)

d1 $ seqP [ 
  (0, 4, sound "bd bd*2"), 
  (4, 8, sound "hh*2 [sn cp] cp future*4"), 
  (8, 12, sound "arpy*8")
]


d1 $ chop 8 $ sound "arpy ~ ~ ~"


d1 $ chop "<16 128 32>" $ sound "arpy ~ feel*2 newnotes"

let pats =
      [
        ("a", stack [n "c4 c5 g4 f4 f5 g4 e5 g4" # s "superpiano" # gain "0.7",
                     n "[c3,g4,c4]" # s "superpiano"# gain "0.7"
                    ]
        ),
        ("b", stack [n "d4 c5 g4 f4 f5 g4 e5 g4" # s "superpiano" # gain "0.7",
                     n "[d3,a4,d4]" # s "superpiano"# gain "0.7"
                    ]
        ),
        ("c", stack [n "f4 c5 g4 f4 f5 g4 e5 g4" # s "superpiano" # gain "0.7",
                     n "[f4,c5,f4]" # s "superpiano"# gain "0.7"
                    ]
        )
      ]
in
d1 $ ur 12 "a b c" pats []

let pats =
      [
        ("a", stack [n "c4 c5 g4 f4 f5 g4 e5 g4" # s "superpiano" # gain "0.7",
                     n "[c3,g4,c4]" # s "superpiano"# gain "0.7"
                    ]
        ),
        ("b", stack [n "d4 c5 g4 f4 f5 g4 e5 g4" # s "superpiano" # gain "0.7",
                     n "[d3,a4,d4]" # s "superpiano"# gain "0.7"
                    ]
        ),
        ("c", stack [n "f4 c5 g4 f4 f5 g4 e5 g4" # s "superpiano" # gain "0.7",
                     n "[f4,c5,f4]" # s "superpiano"# gain "0.7"
                    ]
        )
      ]
    fx = [("reverb", (# (room 0.8 # sz 0.99 # orbit 1))),
          ("faster", fast 2)
         ]
in
d1 $ ur 4 "a:faster b:faster c:faster" pats fx

d1 $ cat [sound "bd*2 sn", sound "arpy jvbass*2"]

d1 $ cat [sound "bd*2 sn", sound "arpy jvbass*2", sound "drum*2"]

d1 $ cat [sound "bd*2 sn", sound "jvbass*3", sound "drum*2", sound "ht mt"]

d1 $ fastcat [sound "bd*2 sn", sound "arpy jvbass*2"]

d1 $ fastcat [sound "bd*2 sn", sound "arpy jvbass*2", sound "drum*2"]

d1 $ fastcat [s "bd*4", s "hh27*8", s "superpiano" # n 0]

d1 $ timeCat [(1, s "bd*4"),
              (1, s "hh27*8"),
              (1, s "superpiano" # n 0)]

d1 $ randcat [sound "bd*2 sn", sound "jvbass*3", sound "drum*2", sound "ht mt"]

d1 $ append (sound "bd*2 sn") (sound "arpy jvbass*2")

d1 $ fastAppend (sound "bd*2 sn") (sound "arpy jvbass*2")

d1 $ wedge (1/2) (sound "bd*2 arpy*3 cp sn*2") (sound "odx [feel future]*2 hh hh")

d1 $ sound "[feel feel:3, hc:3 hc:2 hc:4 ho:1]"

d1 $ brak $ sound "[feel feel:3, hc:3 hc:2 hc:4 ho:1]"

d1 $ brak $ sound "[feel feel:3, hc:3 hc:2 hc:4 ho:1]"

d1 $ n (flatpat $ listToPat [[0,4,7],[(-12),(-8),(-5)]]) # s "superpiano" # sustain 2

d1 $ sound (overlay "bd sn:2" "cp*3")

d1 $ sound ("bd sn:2" <> "cp*3")

d1 $ stack [ 
  sound "bd bd*2",
  sound "hh*2 [sn cp] cp future*4"
]


do 
  resetCycles
  d1 $ s "bd*4"
  d2 $ s "~ hh ~ hh*2"

d1 $ iter' 4 $ sound "bd hh sn cp"


setcps (130/60/4)

d1 $ jux (iter 4) $ sound "arpy arpy:2*2"
  |+ speed (slow 4 $ sine * 0.5 + 1)

d1 $ every 3 rev $ n "0 1 [~ 2] 3" # sound "arpy"

d1 $ jux' [id,rev,(# speed 2)] $ every 2 ("<0.25 0.125 0.5>" <~) $ sound "bd*2 [[~ lt] sn:3] lt:1 [ht mt*2]"
  # squiz "<1 2.5 2>"
  # room (slow 4 $ range 0 0.2 saw)
  # sz 0.5
  # orbit 1

d1 $ off 0.25 (# vowel "<a o i>")
  $ juxBy 0.4 rev $ every 2 (rot "<1 3 2>") $ n "0 <0 4> [2 0] [2 3]" # sound "feel" # speed "1.75 2"


d2 $ juxBy 0.5 rev $ chunk 4 ((+ speed (1 + sine)) . ply 8) $ note "3(3,8)" # sound "bass"
  # speed "<2 4>"
  # legato 1


d1 $ chop 16 $ sound "arpy ~ feel*2 newnotes"

d1 $ slow 2 $ rev $ chop 16 $ sound "breaks125"

d1 $ slow 2 $ jux rev $ chop 16 $ sound "breaks125"

d1 $ chop 16 $ sound (samples "arpy*8" (run 16))

d1 $ loopAt 8 $ rev $ chop 32 $ sound "bev"

d1 $ slow 4 $ striate 8 $ sound "numbers:0 numbers:1 numbers:2 numbers:3"

d1 $ slow 4 $ chop 3 $ sound "numbers:0 numbers:1 numbers:2 numbers:3"

d1 $ slow 4 $ sound "numbers:0 numbers:1 numbers:2 numbers:3"

d1 $ jux rev $ chunk 4 (fast 2 . (|- n 12)) $ off 0.25 (|+ 7) $ struct (iter 4 "t(5,8)")
  $ n (scale "ritusen" "0 .. 7") # sound "arpy"

let scale = getScale (scaleTable ++ [("techno", [0,2,3,5,7,8,10]),
                                     ("broken", [0,1,4,7,8,10])
                                    ])

d1 $ n (scale "techno" "0 1 2 3 4 5 6 7") # sound "superpiano"

d1 $ n (toScale [0,2,3,5,7,8,10] "0 1 2 3 4 5 6 7") # sound "superpiano"

d1 $ sound "jvbass(3,8)"
anticipate 1 $ sound "bd sn" # delay "0.5" # room "0.3"

d1 $ sound "arpy*16" # cutoff 100

interpolate 1 $ sound "arpy*16" # cutoff 16000

d1 $ n (slow 2 $ fmap (*7) $ run 8) 
  # s "supergong" 
  # decay "[1 0.2]/4" 
  # voice "[0.5 0]/8" 
